---
description:
globs:
alwaysApply: false
---
# 项目结构指南

## 整体架构
这是一个飞书多维表格插件项目，采用前后端分离架构：
- `client/` - 前端 React 应用
- `server/` - 后端服务（如果存在）

## 前端目录结构

### 核心目录
```
client/src/
├── components/          # 可复用组件
│   ├── ui/             # shadcn/ui 基础组件
│   ├── CompletableFields.tsx  # 字段选择组件
│   ├── ActionButtons.tsx      # 操作按钮组件
│   └── PluginLayout.tsx       # 插件布局组件
├── pages/              # 页面组件
│   ├── FieldAutoComplete.tsx  # 主要功能页面
│   ├── AutoCompleteProgress.tsx  # 进度页面
│   └── AutoCompleteResult.tsx    # 结果页面
├── lib/                # 工具库和业务逻辑
│   ├── dataSync.ts     # 数据同步逻辑
│   ├── autoCompleteHelper.ts  # 自动补全助手
│   └── apiService.ts   # API 服务
├── hooks/              # 自定义 hooks
└── types/              # TypeScript 类型定义
```

### 关键文件说明

#### 页面组件
- [client/src/pages/FieldAutoComplete.tsx](mdc:client/src/pages/FieldAutoComplete.tsx) - 主功能页面，包含字段选择和自动补全逻辑
- [client/src/pages/AutoCompleteProgress.tsx](mdc:client/src/pages/AutoCompleteProgress.tsx) - 显示补全进度
- [client/src/pages/AutoCompleteResult.tsx](mdc:client/src/pages/AutoCompleteResult.tsx) - 显示补全结果

#### 核心组件
- [client/src/components/CompletableFields.tsx](mdc:client/src/components/CompletableFields.tsx) - 字段选择组件，支持已存在字段自动勾选
- [client/src/components/PluginLayout.tsx](mdc:client/src/components/PluginLayout.tsx) - 插件整体布局
- [client/src/components/ActionButtons.tsx](mdc:client/src/components/ActionButtons.tsx) - 操作按钮组件

#### 业务逻辑
- [client/src/lib/dataSync.ts](mdc:client/src/lib/dataSync.ts) - 数据同步和配置管理
- [client/src/lib/autoCompleteHelper.ts](mdc:client/src/lib/autoCompleteHelper.ts) - 自动补全核心逻辑
- [client/src/lib/apiService.ts](mdc:client/src/lib/apiService.ts) - API 调用封装

#### UI 组件
- [client/src/components/ui/](mdc:client/src/components/ui/) - shadcn/ui 基础组件库

## 配置文件

### 构建配置
- [vite.config.ts](mdc:vite.config.ts) - Vite 构建配置
- [tsconfig.json](mdc:tsconfig.json) - TypeScript 配置
- [tailwind.config.js](mdc:tailwind.config.js) - Tailwind CSS 配置

### 包管理
- [package.json](mdc:package.json) - 项目依赖和脚本
- [pnpm-lock.yaml](mdc:pnpm-lock.yaml) - 锁定依赖版本

## 开发规范

### 文件组织原则
1. **按功能分组** - 相关文件放在同一目录
2. **单一职责** - 每个文件只负责一个功能
3. **清晰命名** - 文件名能够清楚表达其功能

### 导入路径
- 使用 `@/` 别名指向 `src/` 目录
- 相对路径用于同级或子级文件
- 绝对路径用于跨目录引用

### 组件拆分
- 页面级组件放在 `pages/`
- 可复用组件放在 `components/`
- 业务逻辑组件按功能分组
- UI 基础组件放在 `components/ui/`

## 数据流

### 状态管理
1. **本地状态** - 使用 React hooks
2. **配置状态** - 存储在飞书多维表格配置中
3. **服务端状态** - 使用 React Query 管理

### 数据流向
```
用户操作 → 组件状态更新 → 业务逻辑处理 → API 调用 → 结果展示
```

## 部署结构
- 构建输出到 `dist/` 目录
- 静态资源自动处理和优化
- 支持飞书多维表格插件部署

